package com.atguigu.datastructure;

public class DataStructure {

    public static void main(String[] args) {

        /*
        数据结构：线性结构+非线性结构
        线性结构：数据之间存在一对一的线性结构，有数组（顺序存储结构）、队列、链表（链式存储结构）、栈
        非线性结构：二维数组、多维数组、广义表、树结构、图结构

        1. array -> sparsearray
        2. queue
        3. linkedlist
        4. stack


        有一个公司，当有一个新员工入职时，要求将该员工的信息加入（id，姓名，性别，年龄，住址。。。）
        当输入该员工的信息时，要求查找到该员工的所有信息
        要求：不适用数据库，尽量节省内存空间，速度越快越好


         */


        /**
         *
         * hashTable
         * 有一个公司，当有一个新员工入职时，要求将该员工的信息加入（id，姓名，性别，年龄，住址。。。）
         * 当输入该员工的信息时，要求查找到该员工的所有信息
         * 要求：不适用数据库，尽量节省内存空间，速度越快越好  ==> 哈希表（散列表）
         *
         * 散列表：也叫哈希表，是根据关键码值（key-value)而直接进行访问的数据结构。也就是说，它通过
         * 把关键码值映射到表中一个位置来访问记录，以加快查找速度，这个映射函数叫散列函数，存放记录的
         * 数组叫散列表
         *
         * Java  ==>  缓存层（缓存产品[redis, memcache],自己写哈希表（数组+链表，数组+二叉树）） ==> 数据库
         *
         *
         *
         * 分析：
         * 1.插入时，保证按照id从低到高插入
         * 2.使用链表来实现，该链表不带头（即链表的第一个位置就存放员工信息）
         * 3.员工信息类Emp:（）
         *   链表类EmpLinkedList：头指针head指向当前链表的第一个员工，对员工增删改查操作，
         *   哈希表HashTab：管理多条链表(数组)，散列函数决定id对应到那个链表中
         *
         *
         *
         */
    }
}
